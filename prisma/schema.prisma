// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_in        Int?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Roles {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Roles     @default(STUDENT)
  gradeLevel    Int?
  age           Int?
  birthDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Opposite relation field for teacher
  classroomsAsTeacher Classroom[] @relation("Teacher")

  // Opposite relation field for students
  classroomsAsStudent Classroom[] @relation("Students")

  accounts    Account[]
  sessions    Session[]
  Quiz        Quiz[]
  QuizManager QuizManager[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Quiz {
  id          Int           @id @default(autoincrement())
  title       String
  questions   Question[]
  author      User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  QuizManager QuizManager[]

  @@index([userId])
}

model Question {
  id    Int    @id @default(autoincrement())
  title String

  options Option[]

  Quiz     Quiz?  @relation(fields: [quizId], references: [id])
  quizId   Int?
  optionId String

  @@index([quizId])
}

model Option {
  id       Int     @id @default(autoincrement())
  title    String
  isAnswer Boolean @default(false)

  Question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?

  @@index([questionId])
}

model Classroom {
  id        Int    @id @default(autoincrement())
  name      String
  teacher   User   @relation("Teacher", fields: [teacherId], references: [id])
  teacherId String
  students  User[] @relation("Students")

  @@index([teacherId])
}

model QuizManager {
  id      Int  @id @default(autoincrement())
  quiz    Quiz @relation(fields: [quizId], references: [id])
  score   Int
  student User @relation(fields: [userId], references: [id])

  quizId Int
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
  @@index([userId])
}
